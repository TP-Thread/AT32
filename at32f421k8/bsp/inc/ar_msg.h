/**
 ******************************************************************************
 * @file    ar_msg.h
 * @author  TP-Thread
 * @brief   ar message structure and message id definition.
 ******************************************************************************
 */
#ifndef AR_MSG_H
#define AR_MSG_H

#include "main.h"

typedef struct
{
    uint16_t u16MsgId;
    uint16_t u16SubMsgId;
    uint32_t u32Param;
} arMsg_t;

typedef enum __MSG_ID__
{
    AR_MSG_STATE_MACHINE_BASE_ID = 0,
    AR_MSG_STATE_MACHINE_KEY_ID,
    AR_MSG_STATE_MACHINE_APP_ID,
    AR_MSG_STATE_MACHINE_BATTERY_ID,
    AR_MSG_STATE_MACHINE_FAN_ID,
    AR_MSG_STATE_MACHINE_DOCK_ID,
    AR_MSG_STATE_MACHINE_VACUUM_ID,
    AR_MSG_STATE_MACHINE_MICROSWITCH_ID,
    AR_MSG_STATE_MACHINE_BRUSH_ID,
    AR_MSG_STATE_MACHINE_BRUSH_BOARD_ID,
    AR_MSG_STATE_MACHINE_CLEAN_WATER_TANK_ID,
    AR_MSG_STATE_MACHINE_DIRTY_WATER_TANK_ID,
    AR_MSG_STATE_MACHINE_10MS_TRIGGER_ID,
    AR_MSG_STATE_MACHINE_50MS_TRIGGER_ID,
    AR_MSG_STATE_MACHINE_100MS_TRIGGER_ID,
    AR_MSG_STATE_MACHINE_DIRTYCHECK_ID,
    AR_MSG_STATE_MACHINE_BOILER_ID,

    AR_MSG_UART_COMM_BASE_ID = 100,
    AR_MSG_BAT_RX_ID,
    AR_MSG_BAT_TX_ID,
    AR_MSG_FAN_RX_ID,
    AR_MSG_FAN_TX_ID,
    AR_MSG_DOCK_RX_ID,
    AR_MSG_DOCK_TX_ID,
    AR_MSG_LED_RX_ID,
    AR_MSG_LED_TX_ID,
    AR_MSG_VACUUM_RX_ID,
    AR_MSG_VACUUM_TX_ID,
    AR_MSG_BRUSH_RX_ID,
    AR_MSG_BRUSH_TX_ID,

    AR_MSG_WIFI_BASE_ID = 200,
    AR_MSG_WIFI_RX_ID,
    AR_MSG_WIFI_TX_ID,

    AR_MSG_DRIVER_BASE_ID = 300,
    AR_MSG_DRIVER_LED_ID,
    AR_MSG_DRIVER_PUMP_ID,
    AR_MSG_DRIVER_BRUSH_ID,
    AR_MSG_DRIVER_10MS_ID,
    AR_MSG_DRIVER_50MS_ID,
    AR_MSG_DRIVER_100MS_ID,
    AR_MSG_DRIVER_CL_PUMP_ID,

    AR_MSG_LOG_BASE_ID = 400,

    AR_MSG_IMU_BASE_ID = 500,

    AR_MSG_MAX_ID = 0xffff
} MSG_ID_e;

typedef enum __SUBMSG_WIFICOMM_KEY_ID__
{
    AR_SUBMSG_WIFI_BASE_ID = 200,
    AR_SUBMSG_WIFI_RESEND_ID,
    AR_SUBMSG_WIFI_AUDIO_ID,
    AR_SUBMSG_WIFI_APP_ID,
    AR_SUBMSG_WIFI_OTA_STUCK_ID,

    AR_SUBMSG_WIFI_OTA_REPLY_START_ID,
    AR_SUBMSG_WIFI_OTA_REPLY_PROGRAM_ID,
    AR_SUBMSG_WIFI_OTA_REPLY_RESULT_ID,

    // AR_SUBMSG_WIFI_LOG_ID,
    AR_SUBMSG_WIFI_RESET_WIFI_ID,
    AR_SUBMSG_WIFI_BIST_TEST_ID,
    AR_SUBMSG_WIFI_OTHER_TX_ID,
    AR_SUBMSG_WIFI_SHUTDOWN_REQUEST_TX_ID,

    AR_SUBMSG_WIFI_BLACKBOX_TX_ID,

} SUBMSG_WIFI_COMM_KEY_ID_e;

/*************************************************************
如下SubMsg为task_statemachine任务 接收的SubMsg
**************************************************************/

typedef enum __SUBMSG_STATEMACHINE_KEY_ID__
{
    AR_SUBMSG_STATE_MACHINE_KEY_BASE_ID = 0,
    AR_SUBMSG_STATE_MACHINE_KEY_POWER_SHORT_ID,
    AR_SUBMSG_STATE_MACHINE_KEY_SWITCH_SHORT_ID,
    AR_SUBMSG_STATE_MACHINE_KEY_AUTOCLEAN_SHORT_ID,

    AR_SUBMSG_STATE_MACHINE_KEY_POWER_LONG_2S_ID,  // 长按2S关机，软件关�?
    AR_SUBMSG_STATE_MACHINE_KEY_POWER_LONG_10S_ID, // 长按10S电池掉电，在电池硬掉电之前，各模块做一些操作�?

    AR_SUBMSG_STATE_MACHINE_KEY_AUTOCLEAN_LONG_10S_ID, // 非桩自清洁使�?
    AR_SUBMSG_STATE_MACHINE_KEY_AUTOCLEAN_LONG_2S_ID,  // 桩上深度自清洁使�?
    AR_SUBMSG_STATE_MACHINE_KEY_SWITCH_LONG_2S_ID,     // 非wifi项目长按2s切档键调整音量，�?�?�?

    AR_SUBMSG_STATE_MACHINE_COMBINEKEY_AUTOCLEAN_SWITCH_FOR_VERSION,            // 长按自清洁键+6次切档键，语音播报各模块版本
    AR_SUBMSG_STATE_MACHINE_COMBINEKEY_AUTOCLEAN_SWITCH_FOR_AUTO_BIST,          // 长按自清洁键+5次切档键，进入自动BIST模式
    AR_SUBMSG_STATE_MACHINE_COMBINEKEY_AUTOCLEAN_SWITCH_FOR_MANUAL_BIST,        // 长按自清洁键+7次切档键，进入手动BIST模式
    AR_SUBMSG_STATE_MACHINE_COMBINEKEY_AUTOCLEAN_SWITCH_FOR_LANGUAGE_SHOW,      // 长按自清洁键+8次切档键，显示语言版本
    AR_SUBMSG_STATE_MACHINE_COMBINEKEY_AUTOCLEAN_SWITCH_FOR_AUDIO_AFTER_MARKET, // 长按自清洁键+9次切档键�?
    AR_SUBMSG_STATE_MACHINE_COMBINEKEY_AUTOCLEAN_SWITCH_FOR_RESET_WIFI,         // 长按自清洁键+长按切档键，重置wifi
    AR_SUBMSG_STATE_MACHINE_COMBINEKEY_AUTOCLEAN_POWER_FOR_RECOVERY_DEFAULT,    // 长按自清洁键+长按电源键，恢复初始设置
    AR_SUBMSG_STATE_MACHINE_COMBINEKEY_POWER_SWITCH_FOR_IMU_CALIBRATE,          // 长按电源键和切档键，校准陀螺仪

    AR_SUBMSG_STATE_MACHINE_KEY_SWITCH_LONG_10S_ID, // 长按10秒重新进入Bist

    AR_SUBMSG_STATE_MACHINE_KEY_SWITCH_KEY_DOWN_ID, // yaoguang专属的充电休�?s按键ID
    AR_SUBMSG_STATE_MACHINE_KEY_POWER_KEY_DOWN_ID,  // yaoguang专属的充电休�?s按键ID
    AR_SUBMSG_STATE_KEY_KEY1_DOWN_ID,               // yaoguang专属的充电休�?s按键ID

    AR_SUBMSG_STATE_MACHINE_KEY_HOTWATER_DOWN_ID,
    AR_SUBMSG_STATE_MACHINE_KEY_HOTWATER_UP_ID,
    AR_SUBMSG_STATE_MACHINE_KEY_HOTWATER_TIMEOUT_10S_ID,

    AR_SUBMSG_STATE_MACHINE_KEY_POWER_LONG_5S_ID, // for yaoguang海外�?在充电状态下，长�?S，进�?退出能�?
    AR_SUBMSG_STATE_MACHINE_KEY_MAX_ID = 0xffff
} SUBMSG_STATEMACHINE_KEY_ID_e;

typedef enum __SUBMSG_STATEMACHINE_APP_ID__
{
    AR_SUBMSG_STATE_MACHINE_APP_BASE_ID = 0,
    AR_SUBMSG_STATE_MACHINE_APP_SWITCH_RUN_MODE_ID, // APP 进行 自动/MAX/轻拖/吸水 模式的切�?

    AR_SUBMSG_STATE_MACHINE_APP_AUTOCLEAN_OFF_ID,    // APP 关闭自清�?
    AR_SUBMSG_STATE_MACHINE_APP_AUTOCLEAN_PAUSE_ID,  // APP 暂停自清�?
    AR_SUBMSG_STATE_MACHINE_APP_AUTOCLEAN_RESUME_ID, // APP 继续自清�?

    AR_SUBMSG_STATE_MACHINE_APP_NORMAL_AUTOCLEAN_ON_ID, // APP 开启普通自清洁
    AR_SUBMSG_STATE_MACHINE_APP_DEEP_AUTOCLEAN_ON_ID,   // APP 开启深度自清洁

    AR_SUBMSG_STATE_MACHINE_APP_CLEANDRY_ON_ID,          // APP 开启烘�?
    AR_SUBMSG_STATE_MACHINE_APP_CLEANDRY_OFF_ID,         // APP 关闭烘干
    AR_SUBMSG_STATE_MACHINE_APP_SWITCH_CLEANDRY_TYPE_ID, // APP 切换烘干模式
    AR_SUBMSG_STATE_MACHINE_APP_SWITCH_RUN_TYPE_ID,      // APP切换运行时的器件参数

    AR_SUBMSG_STATE_MACHINE_APP_OTA_GENERAL_START_ID, // 整体升级开�?
    AR_SUBMSG_STATE_MACHINE_APP_OTA_GENERAL_END_ID,
    AR_SUBMSG_STATE_MACHINE_APP_OTA_GENERAL_END_SILENT_ID,
    AR_SUBMSG_STATE_MACHINE_APP_OTA_SUBMODULE_START_ID, // 子组件升级开�?
    AR_SUBMSG_STATE_MACHINE_APP_OTA_PACKAGE_READY_ID,
    AR_SUBMSG_STATE_MACHINE_APP_OTA_WATCHDOG_STARVE_ID,

    AR_SUBMSG_STATE_MACHINE_APP_CONFIG_MICROSWITCH_ON_ID,  // APP设置：解锁时，机器自动运�?
    AR_SUBMSG_STATE_MACHINE_APP_CONFIG_MICROSWITCH_OFF_ID, // APP设置：解锁时，机器保持待�?

    AR_SUBMSG_STATE_MACHINE_APP_CONFIG_AUTO_AUTOCLEAN_WHEN_CHARGE_ON_ID,  // APP设置: 上桩充电时，自动运行自清�?
    AR_SUBMSG_STATE_MACHINE_APP_CONFIG_AUTO_AUTOCLEAN_WHEN_CHARGE_OFF_ID, // APP设置: 上桩充电时，不自动运行自清洁

    AR_SUBMSG_STATE_MACHINE_APP_CONFIG_AUTO_CLEANDRY_AFTER_AUTOCLEAN_ON_ID,  // APP设置: 自清洁后自动烘干
    AR_SUBMSG_STATE_MACHINE_APP_CONFIG_AUTO_CLEANDRY_AFTER_AUTOCLEAN_OFF_ID, // APP设置: 自清洁后不自动烘�?

    // DP�?submsg

    // BB  submsg

    // 统计 submsg

    // AT命令 submsg
    AR_SUBMSG_STATE_MACHINE_APP_AT_ID,

    // AUDIO播放完成submsg
    AR_SUBMSG_STATE_MACHINE_APP_AUDIO_DONE,

    AR_SUBMSG_STATE_MACHINE_APP_RUN_START,
    AR_SUBMSG_STATE_MACHINE_APP_RUN_STOP,

    AR_SUBMSG_STATE_MACHINE_APP_MAX_ID = 0xffff
} SUBMSG_STATEMACHINE_APP_ID_e;

typedef enum __SUBMSG_STATEMACHINE_BATTERY_ID__
{
    AR_SUBMSG_STATE_MACHINE_BATTERY_BASE_ID = 0,

    AR_SUBMSG_STATE_MACHINE_BATTERY_SOC_CHANGE_ID,                    // 电量增减1%，上报一条�?
    AR_SUBMSG_STATE_MACHINE_BATTERY_DISCHARGE_LOW_TEMPER_ID,          // 放电，温度过�?
    AR_SUBMSG_STATE_MACHINE_BATTERY_DISCHARGE_LOW_TEMPER_RECOVER_ID,  // 放电低温恢复
    AR_SUBMSG_STATE_MACHINE_BATTERY_DISCHARGE_HIGH_TEMPER_ID,         // 放电，温度过�?
    AR_SUBMSG_STATE_MACHINE_BATTERY_DISCHARGE_HIGH_TEMPER_RECOVER_ID, // 放电高温恢复
    AR_SUBMSG_STATE_MACHINE_BATTERY_DISCHARGE_UNDER_VOLTAGE_ID,       // 放电，欠�?
    AR_SUBMSG_STATE_MACHINE_BATTERY_DISCHARGE_NORMAL_VOLTAGE_ID,      // 放电，正常压
    AR_SUBMSG_STATE_MACHINE_BATTERY_CHARGE_OVER_CURRENT_ID,           // 充电，过�?
    AR_SUBMSG_STATE_MACHINE_BATTERY_CHARGE_HIGH_TEMPER_ID,            // 充电，温度过�?
    AR_SUBMSG_STATE_MACHINE_BATTERY_CHARGE_LOW_TEMPER_ID,             // 充电，温度过�?
    AR_SUBMSG_STATE_MACHINE_BATTERY_CHARGE_FAKE_OVERTIME_ID,          // 充电，假充超�?
    AR_SUBMSG_STATE_MACHINE_BATTERY_CHARGE_VOLTAGE_ABNORMAL_ID,       // 充电，电压异�?
    AR_SUBMSG_STATE_MACHINE_BATTERY_SOC_LOWER_30,
    AR_SUBMSG_STATE_MACHINE_BATTERY_SOC_LOWER_25,
    AR_SUBMSG_STATE_MACHINE_BATTERY_SOC_LOWER_20,
    AR_SUBMSG_STATE_MACHINE_BATTERY_SOC_LOWER_15,
    AR_SUBMSG_STATE_MACHINE_BATTERY_SOC_LOWER_10,
    AR_SUBMSG_STATE_MACHINE_BATTERY_SOC_UPTO_10,
    AR_SUBMSG_STATE_MACHINE_BATTERY_SOC_UPTO_5,
    AR_SUBMSG_STATE_MACHINE_BATTERY_SOC_LOWER_5,

    AR_SUBMSG_STATE_MACHINE_OTA_BAT_RESTART_OK_ID,
    AR_SUBMSG_STATE_MACHINE_OTA_BAT_RESTART_FAIL_ID,
    AR_SUBMSG_STATE_MACHINE_OTA_BAT_GET_INFO_OK_ID,
    AR_SUBMSG_STATE_MACHINE_OTA_BAT_GET_INFO_FAIL_ID,
    AR_SUBMSG_STATE_MACHINE_OTA_BAT_INIT_OK_ID,
    AR_SUBMSG_STATE_MACHINE_OTA_BAT_INIT_FAIL_ID,
    AR_SUBMSG_STATE_MACHINE_OTA_BAT_PROGRAM_OK_ID,
    AR_SUBMSG_STATE_MACHINE_OTA_BAT_PROGRAM_FAIL_ID,
    AR_SUBMSG_STATE_MACHINE_OTA_BAT_VERIFY_OK_ID,
    AR_SUBMSG_STATE_MACHINE_OTA_BAT_VERIFY_FAIL_ID,
    AR_SUBMSG_STATE_MACHINE_OTA_BAT_GO_OK_ID,
    AR_SUBMSG_STATE_MACHINE_OTA_BAT_GO_FAIL_ID,
    AR_SUBMSG_STATE_MACHINE_OTA_BAT_SYNC_OK_ID,
    AR_SUBMSG_STATE_MACHINE_OTA_BAT_SYNC_FAIL_ID,

    AR_SUBMSG_STATE_MACHINE_BAT_CONNECT_ID = 101,
    AR_SUBMSG_STATE_MACHINE_BAT_DISCONNECT_ID = 102,
    AR_SUBMSG_STATE_MACHINE_BATTERY_MAX_ID = 0xffff
} SUBMSG_STATEMACHINE_BATTERY_ID_e;

typedef enum __SUBMSG_STATEMACHINE_FAN_ID__
{
    AR_SUBMSG_STATE_MACHINE_FAN_BASE_ID = 0,

    AR_SUBMSG_STATE_MACHINE_FAN_BLOCKED_HOLE_ID,    // 风机堵吸（风机堵孔）
    AR_SUBMSG_STATE_MACHINE_FAN_BLOCKED_ROTOR_ID,   // 风机堵转
    AR_SUBMSG_STATE_MACHINE_FAN_OVER_VOLTAGE_ID,    // 风机过压
    AR_SUBMSG_STATE_MACHINE_FAN_UNDER_VOLTAGE_ID,   // 风机欠压
    AR_SUBMSG_STATE_MACHINE_FAN_HW_OVER_CURRENT_ID, // 风机硬件过流
    AR_SUBMSG_STATE_MACHINE_FAN_SW_OVER_CURRENT_ID, // 风机软件过流
    AR_SUBMSG_STATE_MACHINE_FAN_HIGH_TEMPER_ID,     // 风机温度过高
    AR_SUBMSG_STATE_MACHINE_FAN_COMM_FAIL_ID,       // 风机通信异常
    AR_SUBMSG_STATE_MACHINE_FAN_POWER_0_ID,         // 风机异常停转

    AR_SUBMSG_STATE_MACHINE_OTA_FAN_RESTART_OK_ID,
    AR_SUBMSG_STATE_MACHINE_OTA_FAN_RESTART_FAIL_ID,
    AR_SUBMSG_STATE_MACHINE_OTA_FAN_GET_INFO_OK_ID,
    AR_SUBMSG_STATE_MACHINE_OTA_FAN_GET_INFO_FAIL_ID,
    AR_SUBMSG_STATE_MACHINE_OTA_FAN_INIT_OK_ID,
    AR_SUBMSG_STATE_MACHINE_OTA_FAN_INIT_FAIL_ID,
    AR_SUBMSG_STATE_MACHINE_OTA_FAN_PROGRAM_OK_ID,
    AR_SUBMSG_STATE_MACHINE_OTA_FAN_PROGRAM_FAIL_ID,
    AR_SUBMSG_STATE_MACHINE_OTA_FAN_VERIFY_OK_ID,
    AR_SUBMSG_STATE_MACHINE_OTA_FAN_VERIFY_FAIL_ID,
    AR_SUBMSG_STATE_MACHINE_OTA_FAN_GO_OK_ID,
    AR_SUBMSG_STATE_MACHINE_OTA_FAN_GO_FAIL_ID,
    AR_SUBMSG_STATE_MACHINE_OTA_FAN_SYNC_OK_ID,
    AR_SUBMSG_STATE_MACHINE_OTA_FAN_SYNC_FAIL_ID,

    AR_SUBMSG_STATE_MACHINE_FAN_MAX_ID = 0xffff
} SUBMSG_STATEMACHINE_FAN_ID_e;

typedef enum __SUBMSG_STATEMACHINE_DOCK_ID__
{
    AR_SUBMSG_STATE_MACHINE_DOCK_BASE_ID = 0,

    AR_SUBMSG_STATE_MACHINE_DOCK_CHARGE_CONNECT_ID,    // 桩充电连接正�?
    AR_SUBMSG_STATE_MACHINE_DOCK_CHARGE_DISCONNECT_ID, // 桩充电连接断开
    AR_SUBMSG_STATE_MACHINE_DOCK_COMM_OK_ID,           // 桩通信正常
    AR_SUBMSG_STATE_MACHINE_DOCK_COMM_FAILED_ID,       // 桩通信失败
    AR_SUBMSG_STATE_MACHINE_DOCK_RESIST_CHECEK_ID,     // 阻抗检测，用来检测触点接触是否良好，具体策略待输�?

    AR_SUBMSG_STATE_MACHINE_DOCK_CLEAN_WATER_TANK_EMPTY_ID, // 桩上清水箱空

    AR_SUBMSG_STATE_MACHINE_DOCK_OTA_START_ACK_ID,
    AR_SUBMSG_STATE_MACHINE_DOCK_OTA_PROGRAM_ACK_ID,
    AR_SUBMSG_STATE_MACHINE_DOCK_OTA_VERIFY_ACK_ID,

    AR_SUBMSG_STATE_MACHINE_DOCK_MAX_ID = 0xffff
} SUBMSG_STATEMACHINE_DOCK_ID_e;

typedef enum __SUBMSG_STATEMACHINE_BRUSH_ID__
{
    AR_SUBMSG_STATE_MACHINE_BRUSH_BASE_ID = 0,
    AR_SUBMSG_STATE_MACHINE_BRUSH_SOFTWARE_OVER_CURRENT_ID, // 刷头软件过流
    AR_SUBMSG_STATE_MACHINE_BRUSH_HARDWARE_OVER_CURRENT_ID, // 刷头硬件过流
    AR_SUBMSG_STATE_MACHINE_BRUSH_OVER_TEMPER_ID,           // 刷头过温

    AR_SUBMSG_STATE_MACHINE_BRUSH_MAX_ID = 0xffff
} SUBMSG_STATEMACHINE_BRUSH_ID_e;

typedef enum __SUBMSG_STATEMACHINE_BRUSH_BOARD_ID__
{
    AR_SUBMSG_STATE_MACHINE_BRUSH_BOARD_BASE_ID = 0,

    AR_SUBMSG_STATE_MACHINE_BRUSH_BOARD_OTA_START_ACK_ID,
    AR_SUBMSG_STATE_MACHINE_BRUSH_BOARD_OTA_PROGRAM_ACK_ID, // 刷头硬件过流
    AR_SUBMSG_STATE_MACHINE_BRUSH_BOARD_OTA_VERIFY_ACK_ID,  // 刷头过温

    AR_SUBMSG_STATE_MACHINE_BRUSH_BOARD_MAX_ID = 0xffff
} SUBMSG_STATEMACHINE_BRUSH_BOARD_ID_e;

typedef enum __SUBMSG_STATEMACHINE_MICROSWITCH_ID__
{
    AR_SUBMSG_STATE_MACHINE_MICROSWITCH_BASE_ID = 0,
    AR_SUBMSG_STATE_MACHINE_MICROSWITCH_LOCK_ID,   // 微动开关，锁定
    AR_SUBMSG_STATE_MACHINE_MICROSWITCH_UNLOCK_ID, // 微动开关，解锁

    AR_SUBMSG_STATE_MACHINE_MICROSWITCH_MAX_ID = 0xffff
} SUBMSG_STATEMACHINE_MICROSWITCH_ID_e;

typedef enum __SUBMSG_STATEMACHINE_CLEAN_WATER_TANK_ID__
{
    AR_SUBMSG_STATE_MACHINE_CLEAN_WATER_TANK_BASE_ID = 0,

    AR_SUBMSG_STATE_MACHINE_CLEAN_WATER_TANK_EMPTY_ID,    // 清水�?�?
    AR_SUBMSG_STATE_MACHINE_CLEAN_WATER_TANK_NOTEMPTY_ID, // 清水�?�?

// 100ms;1s;3s;5s;20s的去抖处理，与逻辑处理，在哪里实现�? 待定
#if (AR_PROJECT_ID == AR_PROJECT_SABER_PLUS)
    // 清水箱状态SaberPlus
    AR_SUBMSG_STATE_MACHINE_CLEAN_WATER_TANK_ERROR_ID,
    AR_SUBMSG_STATE_MACHINE_CLEAN_WATER_TANK_NOTPLACE_ID,
    AR_SUBMSG_STATE_MACHINE_CLEAN_WATER_TANK_INPLACE_AND_EMPTY_ID,
    AR_SUBMSG_STATE_MACHINE_CLEAN_WATER_TANK_INPLACE_AND_MIDDLE_ID,
    AR_SUBMSG_STATE_MACHINE_CLEAN_WATER_TANK_INPLACE_AND_FULL_ID,
#endif
    // 清水箱状态MorphPro
    AR_SUBMSG_STATE_MACHINE_CLEAN_BOX_EMPTY_ID,
    AR_SUBMSG_STATE_MACHINE_CLEAN_BOX_NOT_EMPTY_ID,

    AR_SUBMSG_STATE_MACHINE_CLEAN_WATER_TANK_MAX_ID = 0xffff
} SUBMSG_STATEMACHINE_CLEAN_WATER_TANK_ID_e;

// 污水霍尔的左右定�? 手持机器清扫时，此时左手为左霍尔，右手为右霍尔。（非面对机器时的方向。）
typedef enum __SUBMSG_STATEMACHINE_DIRTY_WATER_TANK_ID__
{
    AR_SUBMSG_STATE_MACHINE_DIRTY_WATER_TANK_BASE_ID = 0,

    AR_SUBMSG_STATE_MACHINE_RIGHT_DIRTY_WATER_TANK_FULL_ID,    // 污水箱右霍尔        �?
    AR_SUBMSG_STATE_MACHINE_RIGHT_DIRTY_WATER_TANK_NOTFULL_ID, // 污水箱右霍尔 非满
    AR_SUBMSG_STATE_MACHINE_FLAT_TANK_ID,                      // 污水箱检测到躺平
    AR_SUBMSG_STATE_MACHINE_NOT_FLAT_TANK_ID,                  // 污水箱检测到不躺�?
    AR_SUBMSG_STATE_MACHINE_DIRTY_WATER_TANK_INPLACE_ID,
    AR_SUBMSG_STATE_MACHINE_DIRTY_WATER_TANK_NOTPLACE_ID,

    AR_SUBMSG_STATE_MACHINE_SEWAGE_BOX_INPLACE_ID,
    AR_SUBMSG_STATE_MACHINE_SEWAGE_BOX_NOTPLACE_ID,

    // 100ms;1s;3s;5s;20s的去抖处理，与逻辑处理，在哪里实现�? 待定

    AR_SUBMSG_STATE_MACHINE_DIRTY_WATER_TANK_MAX_ID = 0xffff
} SUBMSG_STATEMACHINE_DIRTY_WATER_TANK_ID_e;

typedef enum __SUBMSG_STATEMACHINE_DIRTYCHECK_ID__
{
    AR_SUBMSG_STATE_MACHINE_RUN_INTO_DEEP_DIRTY_ID,
    AR_SUBMSG_STATE_MACHINE_RUN_OUTOF_DEEP_DIRTY_ID,
    AR_SUBMSG_STATE_MACHINE_DIRTYCHECK_MAX_ID = 0xffff
} SUBMSG_STATEMACHINE_DIRTYCHECK_ID_e;

typedef enum __SUBMSG_STATEMACHINE_BOILER_ID__
{
    AR_SUBMSG_STATE_MACHINE_BOILER_TRIGGER_NTC_PROTECT_ID,
    AR_SUBMSG_STATE_MACHINE_BOILER_RELEASE_NTC_PROTECT_ID,
    AR_SUBMSG_STATE_MACHINE_BOILER_TRIGGER_EMPTY_PROTECT_ID,
    AR_SUBMSG_STATE_MACHINE_BOILER_RELEASE_EMPTY_PROTECT_ID,
    AR_SUBMSG_STATE_MACHINE_BOILER_MAX_ID = 0xffff
} SUBMSG_STATEMACHINE_BOILER_ID_e;

#ifdef AR_USE_MORPH_4000T
typedef enum __SUBMSG_UART_COMM_BAT_FAN_TX_ID__
{
    AR_SUBMSG_UART_COMM_BAT_TX_BASE_ID = 0,
    AR_SUBMSG_UART_COMM_BAT_TX_VERSION_INFO_ID,
    AR_SUBMSG_UART_COMM_BAT_TX_DYNAMIC_INFO_ID,
    AR_SUBMSG_UART_COMM_BAT_TX_POWER_SLEEP_ID,
    AR_SUBMSG_UART_COMM_BAT_LOOPBACK_ID,
    AR_SUBMSG_UART_COMM_BAT_REPLY_WARNING_ID,
    AR_SUBMSG_UART_COMM_BAT_FAN_ENABLE_ID,
    AR_SUBMSG_UART_COMM_BAT_FAN_DISABLE_ID,
    AR_SUBMSG_UART_COMM_BAT_LED_ICON_ID,
    AR_SUBMSG_UART_COMM_BAT_LED_STRIP_ID,
    AR_SUBMSG_UART_COMM_BAT_LED_NUMBER_ID,

    AR_SUBMSG_UART_COMM_FAN_TX_STATIC_INFO_ID, // 需要传参u32Param，true表示和风机通信获取工厂信息，false表示直接打印已获取的信息，无需和风机通信，理论上每次上电只需要通讯一次，后续可以直接打印
    AR_SUBMSG_UART_COMM_FAN_TX_DYNAMIC_INFO_ID,
    AR_SUBMSG_UART_COMM_FAN_TX_FIXED_INFO_ID,
    AR_SUBMSG_UART_COMM_FAN_TX_POWER_ID, // 需要带u32Param参数为风机功�?
    AR_SUBMSG_UART_COMM_FAN_TX_RESTART_ID,
    AR_SUBMSG_UART_COMM_FAN_TX_ENABLE_ID,
    AR_SUBMSG_UART_COMM_FAN_TX_DISABLE_ID,

    AR_SUBMSG_UART_COMM_FAN_TX_APP_TO_BOOT_UART_ID, // uart切换为boot工作模式�?位数据，偶校�?
    AR_SUBMSG_UART_COMM_FAN_TX_BOOT_TO_APP_UART_ID, // uart切换为app工作模式�?位数据，无校验位

    AR_SUBMSG_UART_COMM_FAN_TX_BOOT_GET_INFO_ID,
    AR_SUBMSG_UART_COMM_FAN_TX_BOOT_INIT_ID,
    AR_SUBMSG_UART_COMM_FAN_TX_BOOT_PROGRAM_ID,
    AR_SUBMSG_UART_COMM_FAN_TX_BOOT_VERIFY_ID,
    AR_SUBMSG_UART_COMM_FAN_TX_BOOT_GO_ID,
    AR_SUBMSG_UART_COMM_FAN_TX_BOOT_SYNC_ID,
    AR_SUNMSG_UART_COMM_FAN_TX_LOOPBACK_ID,

    AR_SUNMSG_UART_COMM_FAN_FIXED_TIME_INFO_ID,
    AR_SUNMSG_UART_COMM_FAN_FIXED_TEMP_INFO_ID,
    AR_SUNMSG_UART_COMM_FAN_FIXED_CURRENT_INFO_ID,
    AR_SUNMSG_UART_COMM_FAN_FIXED_SPEED_INFO_ID,
    AR_SUNMSG_UART_COMM_FAN_FIXED_OVERCURRENT_INFO_ID,
    AR_SUNMSG_UART_COMM_FAN_FIXED_OVERVOLTAGE_INFO_ID,
    AR_SUNMSG_UART_COMM_FAN_FIXED_UNDERVOLTAGE_INFO_ID,
    AR_SUNMSG_UART_COMM_FAN_FIXED_BLOCKED_ROTOR_INFO_ID,
    AR_SUNMSG_UART_COMM_FAN_FIXED_OVERTEMP_INFO_ID,
    AR_SUNMSG_UART_COMM_FAN_FIXED_COMM_FAIL_INFO_ID,

} SUBMSG_UART_COMM_BAT_FAN_TX_ID_e;

#else

typedef enum __SUBMSG_UART_COMM_BAT_TX_ID__
{
    AR_SUBMSG_UART_COMM_BAT_TX_BASE_ID = 0,
    AR_SUBMSG_UART_COMM_BAT_TX_VERSION_INFO_ID,
    AR_SUBMSG_UART_COMM_BAT_TX_DYNAMIC_INFO_ID,
    AR_SUBMSG_UART_COMM_BAT_TX_POWER_SLEEP_ID,
    AR_SUBMSG_UART_COMM_BAT_LOOPBACK_ID,
    AR_SUBMSG_UART_COMM_BAT_REPLY_WARNING_ID,

} SUBMSG_UART_COMM_BAT_TX_ID_e;

typedef enum __SUBMSG_UART_COMM_FAN_TX_ID__
{
    AR_SUBMSG_UART_COMM_FAN_TX_BASE_ID = 0,
    AR_SUBMSG_UART_COMM_FAN_TX_STATIC_INFO_ID, // 需要传参u32Param，true表示和风机通信获取工厂信息，false表示直接打印已获取的信息，无需和风机通信，理论上每次上电只需要通讯一次，后续可以直接打印
    AR_SUBMSG_UART_COMM_FAN_TX_DYNAMIC_INFO_ID,
    AR_SUBMSG_UART_COMM_FAN_TX_FIXED_INFO_ID,
    AR_SUBMSG_UART_COMM_FAN_TX_POWER_ID, // 需要带u32Param参数为风机功�?
    AR_SUBMSG_UART_COMM_FAN_TX_RESTART_ID,

    AR_SUBMSG_UART_COMM_FAN_TX_APP_TO_BOOT_UART_ID, // uart切换为boot工作模式�?位数据，偶校�?
    AR_SUBMSG_UART_COMM_FAN_TX_BOOT_TO_APP_UART_ID, // uart切换为app工作模式�?位数据，无校验位

    AR_SUBMSG_UART_COMM_FAN_TX_BOOT_GET_INFO_ID,
    AR_SUBMSG_UART_COMM_FAN_TX_BOOT_INIT_ID,
    AR_SUBMSG_UART_COMM_FAN_TX_BOOT_PROGRAM_ID,
    AR_SUBMSG_UART_COMM_FAN_TX_BOOT_VERIFY_ID,
    AR_SUBMSG_UART_COMM_FAN_TX_BOOT_GO_ID,
    AR_SUBMSG_UART_COMM_FAN_TX_BOOT_SYNC_ID,
    AR_SUNMSG_UART_COMM_FAN_TX_LOOPBACK_ID,

    AR_SUNMSG_UART_COMM_FAN_FIXED_TIME_INFO_ID,
    AR_SUNMSG_UART_COMM_FAN_FIXED_TEMP_INFO_ID,
    AR_SUNMSG_UART_COMM_FAN_FIXED_CURRENT_INFO_ID,
    AR_SUNMSG_UART_COMM_FAN_FIXED_SPEED_INFO_ID,
    AR_SUNMSG_UART_COMM_FAN_FIXED_OVERCURRENT_INFO_ID,
    AR_SUNMSG_UART_COMM_FAN_FIXED_OVERVOLTAGE_INFO_ID,
    AR_SUNMSG_UART_COMM_FAN_FIXED_UNDERVOLTAGE_INFO_ID,
    AR_SUNMSG_UART_COMM_FAN_FIXED_BLOCKED_ROTOR_INFO_ID,
    AR_SUNMSG_UART_COMM_FAN_FIXED_OVERTEMP_INFO_ID,
    AR_SUNMSG_UART_COMM_FAN_FIXED_COMM_FAIL_INFO_ID,
} SUBMSG_UART_COMM_FAN_TX_ID_e;
#endif

typedef enum __SUBMSG_UART_COMM_VACUUM_TX_ID__
{
    AR_SUBMSG_UART_COMM_VACUUM_TX_BASE_ID = 0,

    AR_SUBMSG_UART_COMM_VACUUM_TX_HEARTBEAT_ID,
    AR_SUBMSG_UART_COMM_VACUUM_TX_HEARTBEAT_CONNECT_ID,
    AR_SUBMSG_UART_COMM_VACUUM_TX_HEARTBEAT_DISCONNECT_ID,
    AR_SUBMSG_UART_COMM_VACUUM_TX_AT_CMD_ID,
    AR_SUBMSG_UART_COMM_VACUUM_TX_ENERGYEFFICIENCY_ID, //

    AR_SUBMSG_UART_COMM_VACUUM_TX_APP_TO_BOOT_UART_ID, // uart切换为boot工作模式�?位数据，偶校�?
    AR_SUBMSG_UART_COMM_VACUUM_TX_BOOT_TO_APP_UART_ID, // uart切换为app工作模式�?位数据，无校验位

    AR_SUBMSG_UART_COMM_VACUUM_TX_BOOT_GET_INFO_ID,
    AR_SUBMSG_UART_COMM_VACUUM_TX_BOOT_INIT_ID,
    AR_SUBMSG_UART_COMM_VACUUM_TX_BOOT_PROGRAM_ID,
    AR_SUBMSG_UART_COMM_VACUUM_TX_BOOT_VERIFY_ID,
    AR_SUBMSG_UART_COMM_VACUUM_TX_BOOT_GO_ID,
    AR_SUBMSG_UART_COMM_VACUUM_TX_BOOT_SYNC_ID,

    AR_SUBMSG_UART_COMM_VACUUM_TX_BIST_ENTER_ID, // 进入BIST，告诉吸尘器不要因为无心跳而进入主模式
    AR_SUBMSG_UART_COMM_VACUUM_TX_BIST_QUIT_ID,  // 退出BIST，告诉吸尘器可以正常检测心�?

    AR_SUBMSG_UART_COMM_VACUUM_TX_OTA_INIT_ID,
    AR_SUBMSG_UART_COMM_VACUUM_TX_OTA_PROGRAM_ID,
    AR_SUBMSG_UART_COMM_VACUUM_TX_OTA_VERIFY_ID,
    AR_SUBMSG_UART_COMM_VACUUM_TX_OTA_GO_ID,

    AR_SUBMSG_UART_COMM_VACUUM_TX_GET_INFO_ID,

    AR_SUBMSG_UART_COMM_VACUUM_TX_LOOPBACK_ID,

    AR_SUBMSG_UART_COMM_VACUUM_TX_REINIT_BAT_UART_TO_APP_ID,
    AR_SUBMSG_UART_COMM_VACUUM_TX_REINIT_BAT_UART_TO_BOOT_ID,

    AR_SUBMSG_UART_COMM_VACUUM_TX_OFFLINE_LOG_ACK_ID,
    AR_SUBMSG_UART_COMM_VACUUM_TX_OFFLINE_TIMESTAMP_ID,

    AR_SUBMSG_UART_COMM_VACUUM_TX_SET_OTA_PROCESSING,
    AR_SUBMSG_UART_COMM_MAIN_MCU_TX_UPLOAD_STATISTICS_ID, // roborock add

    AR_SUBMSG_UART_COMM_VACUUM_TX_NORMAL_CMD_ID,
    AR_SUBMSG_UART_COMM_VACUUM_TX_WARNING_CMD_ID,
    AR_SUBMSG_UART_COMM_VACUUM_TX_BASE_SET_CMD_ID,
} SUBMSG_UART_COMM_VACUUM_TX_ID_e;

typedef enum __SUBMSG_UART_COMM_DOCK_TX_ID__
{
    AR_SUBMSG_UART_COMM_DOCK_TX_BASE_ID = 0,

    AR_SUBMSG_UART_COMM_DOCK_TX_PARAM_ID,
    AR_SUBMSG_UART_COMM_DOCK_TX_SETTING_ID,

    AR_SUBMSG_UART_COMM_DOCK_TX_STATIC_INFO_ID,
    AR_SUBMSG_UART_COMM_DOCK_TX_DYNAMIC_INFO_ID,
    AR_SUBMSG_UART_COMM_DOCK_TX_FIXED_INFO_ID,
    AR_SUBMSG_UART_COMM_DOCK_TX_CLEAN_DRYING_ID,
    AR_SUBMSG_UART_COMM_DOCK_TX_AUTO_CLEAN_ID, // 需要带u32Param参数为自清洁步骤
    AR_SUBMSG_UART_COMM_DOCK_TX_SLEEP_ID,
    AR_SUBMSG_UART_COMM_DOCK_TX_RESTART_ID,
    AR_SUBMSG_UART_COMM_DOCK_TX_STANDBY_ID,
    AR_SUBMSG_UART_COMM_DOCK_TX_AT_ID, // 需要带u32Param参数为AT指令
    AR_SUBMSG_UART_COMM_DOCK_TX_LOOPBACK_ID,
    AR_SUBMSG_UART_COMM_DOCK_TX_GET_FULLINFO_ID,
    AR_SUBMSG_UART_COMM_DOCK_TX_SET_OTA_PROCESSING,

    AR_SUBMSG_UART_COMM_DOCK_TX_OTA_START_ID,
    AR_SUBMSG_UART_COMM_DOCK_TX_OTA_PROGRAM_ID,
    AR_SUBMSG_UART_COMM_DOCK_TX_OTA_VERIFY_ID,
    AR_SUBMSG_UART_COMM_DOCK_TX_OTA_GO_ID,

    AR_SUBMSG_UART_COMM_DOCK_TX_GET_INFO_ID,
} SUBMSG_UART_COMM_DOCK_TX_ID_e;

typedef enum __SUBMSG_UART_COMM_BRUSH_TX_ID__
{
    AR_SUBMSG_UART_COMM_BRUSH_TX_BASE_ID = 0,
    AR_SUBMSG_UART_COMM_BRUSH_TX_PARAM_ID,
    AR_SUBMSG_UART_COMM_BRUSH_TX_SETTING_ID,
    AR_SUBMSG_UART_COMM_BRUSH_TX_WARNING_ID,
    AR_SUBMSG_UART_COMM_BRUSH_TX_WARNING_REQUEST_ID,
    AR_SUBMSG_UART_COMM_BRUSH_TX_AT_CMD_ID,
    AR_SUBMSG_UART_COMM_BRUSH_TX_LOOPBACK_ID,
    AR_SUBMSG_UART_COMM_BRUSH_TX_GET_FULLINFO_ID,

    AR_SUBMSG_UART_COMM_BRUSH_TX_OTA_START,
    AR_SUBMSG_UART_COMM_BRUSH_TX_OTA_PROGRAM,
    AR_SUBMSG_UART_COMM_BRUSH_TX_OTA_VERIFY,
    AR_SUBMSG_UART_COMM_BRUSH_TX_OTA_GO,
} SUBMSG_UART_COMM_BRUSH_TX_ID_e;

typedef enum __SUBMSG_DRIVER_LED_ID__ // To LED Driver.
{
    AR_SUBMSG_DRIVER_LED_BASE_ID = 0,
    AR_SUBMSG_DRIVER_LED_WORK_MODE_AUTO_ID,
    AR_SUBMSG_DRIVER_LED_WORK_MODE_MAX_ID,
    AR_SUBMSG_DRIVER_LED_WORK_MODE_LIGHT_ID,
    AR_SUBMSG_DRIVER_LED_WORK_MODE_UPTAKE_ID,
    AR_SUBMSG_DRIVER_LED_WORK_MODE_OFF_ID,
    AR_SUBMSG_DRIVER_LED_WORK_MODE_BLINK_ID,
    AR_SUBMSG_DRIVER_LED_CHARGE_ON_ID,
    AR_SUBMSG_DRIVER_LED_CHARGE_OFF_ID,
    AR_SUBMSG_DRIVER_LED_DRYING_ON_ID,
    AR_SUBMSG_DRIVER_LED_DRYING_STAGE_ON_ID,
    AR_SUBMSG_DRIVER_LED_DRYING_OFF_ID,
    AR_SUBMSG_DRIVER_LED_FAC_ID,
    AR_SUBMSG_DRIVER_LED_ALL_OFF_ID,
    AR_SUBMSG_DRIVER_LED_STRIP_BLUE_ON_ID,
    AR_SUBMSG_DRIVER_LED_STRIP_BLUE_OFF_ID,
    AR_SUBMSG_DRIVER_LED_STRIP_BLUE_BREATH_ID,
    AR_SUBMSG_DRIVER_LED_STRIP_BLUE_BREATH_FAST_ID,
    AR_SUBMSG_DRIVER_LED_STRIP_RED_ON_ID,
    AR_SUBMSG_DRIVER_LED_STRIP_ERROR_RED_ON_ID,
    AR_SUBMSG_DRIVER_LED_STRIP_RED_OFF_ID,
    AR_SUBMSG_DRIVER_LED_SOC_ON_ID,
    AR_SUBMSG_DRIVER_LED_SOC_OFF_ID,
    AR_SUBMSG_DRIVER_LED_SOC_FOR_LANGUAGE_ID,
    AR_SUBMSG_DRIVER_LED_DIRTY_ID,

    AR_SUBMSG_DRIVER_LED_WIFI_ON_ID,
    AR_SUBMSG_DRIVER_LED_WIFI_OFF_ID,
    AR_SUBMSG_DRIVER_LED_WIFI_BLINK_SLOW_ID,
    AR_SUBMSG_DRIVER_LED_WIFI_BLINK_FAST_ID,
    AR_SUBMSG_DRIVER_LED_CLEAN_WATER_ON_ID,
    AR_SUBMSG_DRIVER_LED_CLEAN_WATER_OFF_ID,
    AR_SUBMSG_DRIVER_LED_CLEAN_WATER_BLINK__ID,
    AR_SUBMSG_DRIVER_LED_DIRTY_WATER_ON_ID,
    AR_SUBMSG_DRIVER_LED_DIRTY_WATER_OFF_ID,
    AR_SUBMSG_DRIVER_LED_DIRTY_WATER_BLINK_ID,
    AR_SUBMSG_DRIVER_LED_AUTO_CLEAN_ON_ID,
    AR_SUBMSG_DRIVER_LED_AUTO_CLEAN_OFF_ID,
    AR_SUBMSG_DRIVER_LED_AUTO_CLEAN_BLINK_ID,
    AR_SUBMSG_DRIVER_LED_ERROR_ON_ID,
    AR_SUBMSG_DRIVER_LED_ERROR_OFF_ID,
    AR_SUBMSG_DRIVER_LED_ERROR_BLINK_ID,
    AR_SUBMSG_DRIVER_LED_STRIP_BLUE_BREATH_ON_ID,
    AR_SUBMSG_DRIVER_LED_STRIP_BLUE_BREATH_OFF_ID,

    AR_SUBMSG_DRIVER_LED_ERROR_EX_ID,
    AR_SUBMSG_DRIVER_LED_SOC_BLINK_ID,
    AR_SUBMSG_DRIVER_LED_SOC_BREATH_CHARGE_ID,
    AR_SUBMSG_DRIVER_LED_SOC_BLINK_SLOW_ID,
    AR_SUBMSG_DRIVER_LED_SOC_ALL_ON_ID,
    AR_SUBMSG_DRIVER_LED_STRIP_ALL_OFF_ID,
    AR_SUBMSG_DRIVER_LED_FACTORY_CHANGE_BRIGHTNESS_ID,
    AR_SUBMSG_DRIVER_LED_FACTORY_READ_TEST_ID,
    AR_SUBMSG_DRIVER_LED_ICON,
    AR_SUBMSG_DRIVER_LED_STRIP,
    AR_SUBMSG_DRIVER_LED_SEG_FACTORY,
} SUBMSG_DRIVER_LED_ID_e;

typedef enum __SUBMSG_DRIVER_PUMP_ID__
{
    AR_SUBMSG_DRIVER_PUMP_BASE_ID = 0,
    AR_SUBMSG_DRIVER_PUMP_ON_ID,
    AR_SUBMSG_DRIVER_PUMP_OFF_ID,
    AR_SUBMSG_DRIVER_PUMP_STEP_OFF_ID,
    AR_SUBMSG_DRIVER_PUMP_SUCTION,
    //	AR_SUBMSG_DRIVER_PUMP_AUTO_ID,
    //	AR_SUBMSG_DRIVER_PUMP_AUTO_PLUS_ID,
    //	AR_SUBMSG_DRIVER_PUMP_MAX_ID,
    //	AR_SUBMSG_DRIVER_PUMP_LIGHT_ID,
    //	AR_SUBMSG_DRIVER_PUMP_AUTO_LEVEL_ID,//清洁液泵自动档位调节
    //	AR_SUBMSG_DRIVER_PUMP_AUTOCLEAN_ID,

    AR_SUBMSG_DRIVER_PUMP_ON_10ML_ID,
    AR_SUBMSG_DRIVER_PUMP_ON_15ML_ID,
    AR_SUBMSG_DRIVER_PUMP_ON_20ML_ID,
    AR_SUBMSG_DRIVER_PUMP_ON_25ML_ID,
    AR_SUBMSG_DRIVER_PUMP_ON_30ML_ID,
    AR_SUBMSG_DRIVER_PUMP_ON_35ML_ID,
    AR_SUBMSG_DRIVER_PUMP_ON_40ML_ID,
    AR_SUBMSG_DRIVER_PUMP_ON_45ML_ID,
    AR_SUBMSG_DRIVER_PUMP_ON_50ML_ID,
    AR_SUBMSG_DRIVER_PUMP_ON_60ML_ID,
    AR_SUBMSG_DRIVER_PUMP_ON_70ML_ID,
    AR_SUBMSG_DRIVER_PUMP_ON_90ML_ID,
    AR_SUBMSG_DRIVER_PUMP_ON_200ML_ID,
    AR_SUBMSG_DRIVER_PUMP_REVERSE_200ML_ID,
    AR_SUBMSG_DRIVER_PUMP_ON_115ML_ID,
    AR_SUBMSG_DRIVER_PUMP_FOR_EMPTY_DET,
    AR_SUBMSG_DRIVER_PUMP_HOT_WATER_SELF_ADAPTION,
    AR_SUBMSG_DRIVER_PUMP_SPARY_WATER,
} SUBMSG_DRIVER_PUMP_ID_e;

/************HEPENG ADD FOR CL_PUMP*********/
typedef enum __SUBMSG_DRIVER_CLEAN_FLUID_PUMP_ID__
{
    AR_SUBMSG_DRIVER_CLEAN_FLUID_PUMP_BASE_ID = 0,
    AR_SUBMSG_DRIVER_CLEAN_FLUID_PUMP_ON_ID,
    AR_SUBMSG_DRIVER_CLEAN_FLUID_PUMP_OFF_ID,
    AR_SUBMSG_DRIVER_CLEAN_FLUID_PUMP_AUTO_ID,
    AR_SUBMSG_DRIVER_CLEAN_FLUID_PUMP_MAX_ID,
    AR_SUBMSG_DRIVER_CLEAN_FLUID_PUMP_LIGHT_ID,
    AR_SUBMSG_DRIVER_CLEAN_FLUID_PUMP_UPTAKE_ID,
    AR_SUBMSG_DRIVER_CLEAN_FLUID_PUMP_AUTO_CLEAN_ID,    // 自清洁模式ID
    AR_SUBMSG_DRIVER_CLEAN_FLUID_PUMP_AUTO_LEVEL_ID,    // Auto档时水量调节。param: 基础/增强
    AR_SUBMSG_DRIVER_CLEAN_FLUID_PUMP_CONCENTRATION_ID, // 清洁液泵浓度�?param: 300:1 / 200:1 / 100:1

} SUBMSG_DRIVER_CLEAN_FLUID_PUMP_ID_e;

typedef enum __SUBMSG_DRIVER_BRUSH_ID__
{
    AR_SUBMSG_DRIVER_BRUSH_BASE_ID = 0,
    AR_SUBMSG_DRIVER_BRUSH_OFF_ID,
    AR_SUBMSG_DRIVER_BRUSH_OFF_LIGHT_ON_ID,
    AR_SUBMSG_DRIVER_BRUSH_NORMAL_ID,
    AR_SUBMSG_DRIVER_BRUSH_ECO_ID,
    AR_SUBMSG_DRIVER_BRUSH_MAX_ID,
    AR_SUBMSG_DRIVER_BRUSH_CLEANDRYING_ID,
    AR_SUBMSG_DRIVER_BRUSH_CLEANDRYING_REVERSE_ID,
    AR_SUBMSG_DRIVER_BRUSH_AUTOCLEAN_ID,
    AR_SUBMSG_DRIVER_BRUSH_AUTOCLEAN_REVERSE_ID,
    AR_SUBMSG_DRIVER_BRUSH_CW_ID,
    AR_SUBMSG_DRIVER_BRUSH_CCW_ID,
    AR_SUBMSG_DRIVER_BRUSH_LIGHT_TO_NORMAL_ID,
    AR_SUBMSG_DRIVER_BRUSH_LIGHT_TO_MAX_ID,
    AR_SUBMSG_DRIVER_BRUSH_ALL_TO_OFF_ID,
    AR_SUBMSG_DRIVER_BRUSH_CLEANDRY_DELINE_ID,
    AR_SUBMSG_DRIVER_BRUSH_CLEANDRYING_HIGHSPEED_ID,
    AR_SUBMSG_DRIVER_BRUSH_CLEANDRYING_REVERSE_HIGHSPEED_ID,
    AR_SUBMSG_DRIVER_BRUSH_CLEANDRYING_SILENT_START_ID,
    AR_SUBMSG_DRIVER_BRUSH_CLEANDRYING_REVERSE_SILENT_START_ID,
    AR_SUBMSG_DRIVER_BRUSH_CLEANDRYING_SILENT_HOLD_ID,
    AR_SUBMSG_DRIVER_BRUSH_CLEANDRYING_REVERSE_SILENT_HOLD_ID,
    AR_SUBMSG_DRIVER_BRUSH_CLEANDRYING_SILENT_LAST_ID,
    AR_SUBMSG_DRIVER_BRUSH_CLEANDRYING_REVERSE_SILENT_LAST_ID,
    AR_SUBMSG_DRIVER_BRUSH_OFF_STILL_ON_ID, // 运行结束后增加一个滚刷缓停的动作
    AR_SUBMSG_DRIVER_BRUSH_RUN_VOLTAGE_ID,
} SUBMSG_DRIVER_BRUSH_ID_e;

#endif /* AR_MSG_H */
